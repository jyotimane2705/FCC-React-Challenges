 
Challenge 6) Learn About Self-Closing JSX Tags = Any JSX element can be written with a self-closing tag, and every element must be closed.
	const JSX = (
	<div>
          <h2>Welcome to React!</h2> <br />
          <p>Be sure to close all tags!<p />
    	  <hr />
         </div>
 	);

Challenge 7) Create a Stateless Functional Component = There are two ways to create a React component. 
	     The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component. 
	     React requires your function name to begin with a capital letter.

		const MyComponent = function() {
  		// Change code below this line
		return (
     		<div> 
      			text="completed challenge"
    		</div>
		);

		
Challenge 8) Create a React Component = The other way to define a React component is with the ES6 class syntax.
		ex = 
		   class Hello extends React.Component {
  		   constructor(props) {
    		   super(props);
  		   }

  		  render() {
    		  return (
    		  );
  		   }
		}
	}

	This creates an ES6 class Hello which extends the React.Component class. So the Hello class now has access to many useful React features, 
	such as local state and lifecycle hooks. 
	Also Hello class has a constructor defined within it that calls super(). 
	It uses super() to call the constructor of the parent class. 
	The constructor is a special method used during the initialization of objects that are created with the class keyword. 
	It is best practice to call a component's constructor with super, and pass props to both. 
	This makes sure the component is initialized properly. 

		class MyComponent extends React.Component {
  		constructor(props) {
    		super(props);
  		}
  		render() {
       		return (
       		<div>
      		<h1>Hello React!</h1>
      		</div>
    		);
	      }
	   };

Challenge 9) Create a Component with Composition = Component composition is one of React's powerful features.
	     we can compose multiple React components together

	     const ChildComponent = () => {
  	     return (
    		<div>
      		  <p>I am the child</p>
    		</div>); };

	     class ParentComponent extends React.Component {
  	     constructor(props) {
             super(props);
             }
              render() {
               return (
      	      <div>    
         	<div>
      		   <h1>I am the parent</h1>
 		</div>
  		<ChildComponent />
              </div>);  } };

Challenge 10) Use React to Render Nested Components = 

const TypesOfFruit = () => {
  return (
    <div>
      <h2>Fruits:</h2>
      <ul>
        <li>Apples</li>
        <li>Blueberries</li>
        <li>Strawberries</li>
        <li>Bananas</li>
      </ul>
    </div>
  );
};

const Fruits = () => {
  return (
    <div>
      { /* Change code below this line */ }
      <TypesOfFruit />
      { /* Change code above this line */ }
    </div>
  );
};

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
        <Fruits />
        { /* Change code above this line */ }
      </div>
    );
  }
};
