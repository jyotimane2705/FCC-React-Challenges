
Challenge 16) Access Props Using this.props = To access props within a class component, 
	you preface the code that you use to access it with this.

class App extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
        <div>
            { /* Change code below this line */ }
  <Welcome name="Maya"/>
            { /* Change code above this line */ }
        </div>
    );
  }
};

class Welcome extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
        <div>
          { /* Change code below this line */ }
<p>Hello, <strong>{this.props.name}</strong>!</p>
          { /* Change code above this line */ }
        </div>
    );
  }
};


Challenge 17) Review Using Props with Stateless Functional Components
A stateless functional component is any function you write which accepts props and returns JSX and
 is a class that extends React.Component, but does not use internal state
stateful component is a class component that does maintain its own internal state

class CampSite extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Camper/>
      </div>
    );
  }
};
// Change code below this line
const Camper = props => <p>{props.name}</p>;

Camper.defaultProps = {
  name: "CamperBot"
};

Camper.propTypes = {
  name: PropTypes.string.isRequired
};

Challenge 18) Create a Stateful Component = State consists of any data your application needs to know about, that can change over time

class StatefulComponent extends React.Component {
  constructor(props) {
    super(props);
    // Only change code below this line
      this.state = {
          firstName : "Maya"
}
    // Only change code above this line
  }
  render() {
    return (
      <div>
        <h1>{this.state.firstName}</h1>
      </div>
    );
  }
};


Challenge 19)  Render State in the User Interface = If you want to access a state value within the return of the render method, 
you have to enclose the value in curly braces.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    return (
      <div>
        { /* Change code below this line */ }
<h1>{this.state.name}</h1>
        { /* Change code above this line */ }
      </div>
    );
  }
};


Challenge 20) Render State in the User Interface Another Way = There is another way to access state in a component. 
In the render() method, before the return statement, you can write JavaScript directly. 

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'freeCodeCamp'
    }
  }
  render() {
    // Change code below this line
 const name = this.state.name;
    // Change code above this line
    return (
      <div>
        { /* Change code below this line */ } 
        <h1>{name}</h1>

        { /* Change code above this line */ }
      </div>
    );
  }
};









































