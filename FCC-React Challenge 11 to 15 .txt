
Challenge 11) Compose React Components= You can render JSX elements, stateless functional components, and ES6 class components within other components.
class Fruits extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h2>Fruits:</h2>
        { /* Change code below this line */ }
    <NonCitrus />
    <Citrus />
        { /* Change code above this line */ }
      </div>
    );
  }
};

class TypesOfFood extends React.Component {
  constructor(props) {
     super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        { /* Change code below this line */ }
  <Fruits />
        { /* Change code above this line */ }
        <Vegetables />
      </div>
    );
  }
};


Challenge 12) Render a Class Component to the DOM

class TypesOfFood extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>Types of Food:</h1>
        {/* Change code below this line */}
        
        <Fruits />
        <Vegetables  />
       
        {/* Change code above this line */}
      </div>
    );
  }
};

// Change code below this line
ReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'))


Challenge 12) Write a React Component from Scratch
// Change code below this line
class MyComponent extends React.Component{
  constructor(props){
      super(props);
  }

render(){
  return (
    <div>
      <h1>My First React Component!</h1>
    </div>
    
  ); 
  } 
};
ReactDOM.render(<MyComponent />, document.getElementById('challenge-node'))

Challenge 13) Pass Props to a Stateless Functional Component = React: props. In React, you can pass props, or properties, to child components. 

const CurrentDate = (props) => {
  return (
    <div>
      { /* Change code below this line */ }
       const date = new Date();
      <p>The current date is: {props.date}</p>
     
      { /* Change code above this line */ }
    </div>
  );
};

class Calendar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h3>What date is it?</h3>
        { /* Change code below this line */ }
        <CurrentDate date={Date()} />
        { /* Change code above this line */ }
      </div>
    );
  }
};


Challenge 13) Pass an Array as Props = To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces.

<ParentComponent>
  <ChildComponent colors={["green", "blue", "red"]} />
</ParentComponent>

The child component then has access to the array property colors. Array methods such as join() can be used when accessing the property.

const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>
This will join all colors array items into a comma separated string and produce: <p>green, blue, red</p>. 
const List = (props) => {
  { /* Change code below this line */ }

return <p>{props.tasks.join(", ")}</p>; 

  { /* Change code above this line */ }
};

class ToDo extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <h1>To Do Lists</h1>
        <h2>Today</h2>
    { /* Change code below this line */ }
  <List tasks={["Walk", "Cook"]} />
        <h2>Tomorrow</h2>
  <List tasks = {["Study", "Code", "Eat"]} />
       
    { /* Change code above this line */ }
      </div>
    );
  }
};


Challenge 13) Use Default Props = You can assign default props to a component as a property on the component itself 
const ShoppingCart = (props) => {
  return (
    <div>
      <h1>Shopping Cart Component</h1>
    </div>
  )
};
// Change code below this line
ShoppingCart.defaultProps = {
  items: 0
};


Challenge 14) Override Default Props
const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
}

Items.defaultProps = {
  quantity: 0
}

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    { /* Change code below this line */ }
    return <Items quantity= {10} />;
    { /* Change code above this line */ }
  }
}; 

Challenge 15) Use PropTypes to Define the Props You Expect = React provides useful type-checking features to verify that components receive props of the correct type
https://legacy.reactjs.org/docs/typechecking-with-proptypes.html#proptypes

const Items = (props) => {
  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
};

// Change code below this line
Items.propTypes = { quantity : PropTypes.number.isRequired }
// Change code above this line

Items.defaultProps = {
  quantity: 0
};

class ShoppingCart extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <Items />
  }
};



















