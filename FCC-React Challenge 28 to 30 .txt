
Challenge 28) Use the Lifecycle Method componentWillMount = Lifecycle Method are special methods that provide opportunities 
		to perform actions at specific points in the lifecycle of a component.
    main lifecycle methods: 
	componentWillMount() 
	componentDidMount() 
	shouldComponentUpdate() 
	componentDidUpdate() 
	componentWillUnmount()

The componentWillMount() method is called before the render() method when a component is being mounted to the DOM.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  componentWillMount() {
    // Change code below this line
console.log("componentWillMount lifecycle method");
    // Change code above this line
  }
  render() {
    return <div />
  }
};



Challenge 29) Use the Lifecycle Method componentDidMount = This method is called after a component is mounted to the DOM.

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500);
  }
  render() {
    return (
      <div>
        {/* Change code below this line */}
        <h1>Active Users:{ this.state.activeUsers } </h1>
        {/* Change code above this line */}
      </div>
    );
  }
}

Challenge 30) Add Event Listeners = The componentDidMount() method is also the best place to attach any event listeners you need to add for specific functionality

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // Change code below this line
  componentDidMount() {
document.addEventListener("keydown",this.handleKeyPress)
  }
  componentWillUnmount() {
document.removeEventListener("keydown", this.handleKeyPress);
  }
  // Change code above this line
  handleEnter() {
    this.setState((state) => ({
      message: state.message + 'You pressed the enter key! '
    }));
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};




























