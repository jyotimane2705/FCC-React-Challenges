
Challenge 31) Optimize Re-Renders with shouldComponentUpdate = React provides a lifecycle method you can call when child components receive new state or props, 
and declare specifically if the components should update or not. 
This menthod nextProps and nextState as parameters.

class OnlyEvens extends React.Component {
  constructor(props) {
    super(props);
  }
  shouldComponentUpdate(nextProps, nextState) {
    console.log('Should I update?');
    // Change code below this line
   if (nextProps.value % 2 == 0) {
        return true;
      }
      return false;
     // change code above this line
  }
    // Change code above this line

  componentDidUpdate() {
    console.log('Component re-rendered.');
  }
  render() {
    return <h1>{this.props.value}</h1>;
  }
}

class Controller extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 0
    };
    this.addValue = this.addValue.bind(this);
  }
  addValue() {
    this.setState(state => ({
      value: state.value + 1
    }));
  }
  render() {
    return (
      <div>
        <button onClick={this.addValue}>Add</button>
        <OnlyEvens value={this.state.value} />
      </div>
    );
  }
}


Challenge 32) Introducing Inline Styles = 

class Colorful extends React.Component {
  render() {
    return (
     <div style={{color: 'red', fontSize: '72'}}>
        Big Red
      </div>
    );
  }
};


Challenge 33) Add Inline Styles in React = // Change code above this line
const styles = {
  color: 'purple',
  fontSize: 40,
  border: "2px solid purple",
};

class Colorful extends React.Component {
  render() {
    // Change code below this line
    return (
      <div style={styles}>Style Me!</div>
    );
    // Change code above this line
  }
};

Challenge 34) Use Advanced JavaScript in React Render Method = 

const inputStyle = {
  width: 235,
  margin: 5
};

class MagicEightBall extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      userInput: '',
      randomIndex: ''
    };
    this.ask = this.ask.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  ask() {
    if (this.state.userInput) {
      this.setState({
        randomIndex: Math.floor(Math.random() * 20),
        userInput: ''
      });
    }
  }
  handleChange(event) {
    this.setState({
      userInput: event.target.value
    });
  }
  render() {
    const possibleAnswers = [
      'It is certain',
      'It is decidedly so',
      'Without a doubt',
      'Yes, definitely',
      'You may rely on it',
      'As I see it, yes',
      'Outlook good',
      'Yes',
      'Signs point to yes',
      'Reply hazy try again',
      'Ask again later',
      'Better not tell you now',
      'Cannot predict now',
      'Concentrate and ask again',
      "Don't count on it",
      'My reply is no',
      'My sources say no',
      'Most likely',
      'Outlook not so good',
      'Very doubtful'
    ];

    const answer =   possibleAnswers[this.state.randomIndex];  // Change this line
    return (
      <div>
        <input
          type='text'
          value={this.state.userInput}
          onChange={this.handleChange}
          style={inputStyle}
        />
        <br />
        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>
        <br />
        <h3>Answer:</h3> 
               
        <p>
          {/* Change code below this line */}
   
        {answer}      
         
          {/* Change code above this line */}
        </p>
      
      </div>
    );
  }
}

Challenge 35) Render with an If-Else Condition = 

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  toggleDisplay() {
    this.setState((state) => ({
      display: !state.display
    }));
  }
  render() {
    // Change code below this line
if(this.state.display){
return (
  <div>
  <button onClick={this.toggleDisplay}>Toggle Display</button>
    <h1>Displayed!</h1>
  </div>
      );
}else{
      return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
     
       </div>
    );
  }
  }
};